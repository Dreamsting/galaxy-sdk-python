#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from sds.table import TableService
from sds.table.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  GetResult get(GetRequest request)')
  print('  PutResult put(PutRequest request)')
  print('  IncrementResult increment(IncrementRequest request)')
  print('  RemoveResult remove(RemoveRequest request)')
  print('  ScanResult scan(ScanRequest request)')
  print('  BatchResult batch(BatchRequest request)')
  print('  PutResult putToRebuildIndex(PutRequest request)')
  print('  Version getServerVersion()')
  print('  void validateClientVersion(Version clientVersion)')
  print('  i64 getServerTime()')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = TableService.Client(protocol)
transport.open()

if cmd == 'get':
  if len(args) != 1:
    print('get requires 1 args')
    sys.exit(1)
  pp.pprint(client.get(eval(args[0]),))

elif cmd == 'put':
  if len(args) != 1:
    print('put requires 1 args')
    sys.exit(1)
  pp.pprint(client.put(eval(args[0]),))

elif cmd == 'increment':
  if len(args) != 1:
    print('increment requires 1 args')
    sys.exit(1)
  pp.pprint(client.increment(eval(args[0]),))

elif cmd == 'remove':
  if len(args) != 1:
    print('remove requires 1 args')
    sys.exit(1)
  pp.pprint(client.remove(eval(args[0]),))

elif cmd == 'scan':
  if len(args) != 1:
    print('scan requires 1 args')
    sys.exit(1)
  pp.pprint(client.scan(eval(args[0]),))

elif cmd == 'batch':
  if len(args) != 1:
    print('batch requires 1 args')
    sys.exit(1)
  pp.pprint(client.batch(eval(args[0]),))

elif cmd == 'putToRebuildIndex':
  if len(args) != 1:
    print('putToRebuildIndex requires 1 args')
    sys.exit(1)
  pp.pprint(client.putToRebuildIndex(eval(args[0]),))

elif cmd == 'getServerVersion':
  if len(args) != 0:
    print('getServerVersion requires 0 args')
    sys.exit(1)
  pp.pprint(client.getServerVersion())

elif cmd == 'validateClientVersion':
  if len(args) != 1:
    print('validateClientVersion requires 1 args')
    sys.exit(1)
  pp.pprint(client.validateClientVersion(eval(args[0]),))

elif cmd == 'getServerTime':
  if len(args) != 0:
    print('getServerTime requires 0 args')
    sys.exit(1)
  pp.pprint(client.getServerTime())

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()

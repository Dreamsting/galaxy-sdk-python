#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from sds.admin import AdminService
from sds.admin.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void saveAppInfo(AppInfo appInfo)')
  print('  AppInfo getAppInfo(string appId)')
  print('   findAllApps()')
  print('   findAllTables()')
  print('  TableInfo createTable(string tableName, TableSpec tableSpec)')
  print('  void dropTable(string tableName)')
  print('  void alterTable(string tableName, TableSpec tableSpec)')
  print('  void cloneTable(string srcName, string destTable, bool flushTable)')
  print('  void disableTable(string tableName)')
  print('  void enableTable(string tableName)')
  print('  TableSpec describeTable(string tableName)')
  print('  TableStatus getTableStatus(string tableName)')
  print('  TableState getTableState(string tableName)')
  print('   getTableSplits(string tableName, Dictionary startKey, Dictionary stopKey)')
  print('  TimeSeriesData queryMetric(MetricQueryRequest query)')
  print('   queryMetrics( queries)')
  print('   findAllAppInfo()')
  print('  i64 getTableSize(string tableName)')
  print('  void putClientMetrics(ClientMetrics clientMetrics)')
  print('  void subscribePhoneAlert(string phoneNumber, string spaceId)')
  print('  void unsubscribePhoneAlert(string phoneNumber, string spaceId)')
  print('  void subscribeEmailAlert(string email, string spaceId)')
  print('  void unsubscribeEmailAlert(string email, string spaceId)')
  print('   listSubscribedPhone(string spaceId)')
  print('   listSubscribedEmail(string spaceId)')
  print('   getTableHistorySize(string tableName, i64 startDate, i64 stopDate)')
  print('  void renameTable(string srcName, string destName)')
  print('  TableSnapshots listSnapshots(string tableName)')
  print('  void snapshotTable(string tableName, string snapshotName)')
  print('  void deleteSnapshot(string tableName, string snapshotName)')
  print('  void restoreSnapshot(string tableName, string snapshotName, string destTableName, bool isSystem)')
  print('   listAllSnapshots()')
  print('  void cancelSnapshotTable(string tableName, string snapshotName)')
  print('  SnapshotState getSnapshotState(string tableName, string snapshotName)')
  print('  QuotaInfo getQuotaInfo(string spaceId)')
  print('  Version getServerVersion()')
  print('  void validateClientVersion(Version clientVersion)')
  print('  i64 getServerTime()')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = AdminService.Client(protocol)
transport.open()

if cmd == 'saveAppInfo':
  if len(args) != 1:
    print('saveAppInfo requires 1 args')
    sys.exit(1)
  pp.pprint(client.saveAppInfo(eval(args[0]),))

elif cmd == 'getAppInfo':
  if len(args) != 1:
    print('getAppInfo requires 1 args')
    sys.exit(1)
  pp.pprint(client.getAppInfo(args[0],))

elif cmd == 'findAllApps':
  if len(args) != 0:
    print('findAllApps requires 0 args')
    sys.exit(1)
  pp.pprint(client.findAllApps())

elif cmd == 'findAllTables':
  if len(args) != 0:
    print('findAllTables requires 0 args')
    sys.exit(1)
  pp.pprint(client.findAllTables())

elif cmd == 'createTable':
  if len(args) != 2:
    print('createTable requires 2 args')
    sys.exit(1)
  pp.pprint(client.createTable(args[0],eval(args[1]),))

elif cmd == 'dropTable':
  if len(args) != 1:
    print('dropTable requires 1 args')
    sys.exit(1)
  pp.pprint(client.dropTable(args[0],))

elif cmd == 'alterTable':
  if len(args) != 2:
    print('alterTable requires 2 args')
    sys.exit(1)
  pp.pprint(client.alterTable(args[0],eval(args[1]),))

elif cmd == 'cloneTable':
  if len(args) != 3:
    print('cloneTable requires 3 args')
    sys.exit(1)
  pp.pprint(client.cloneTable(args[0],args[1],eval(args[2]),))

elif cmd == 'disableTable':
  if len(args) != 1:
    print('disableTable requires 1 args')
    sys.exit(1)
  pp.pprint(client.disableTable(args[0],))

elif cmd == 'enableTable':
  if len(args) != 1:
    print('enableTable requires 1 args')
    sys.exit(1)
  pp.pprint(client.enableTable(args[0],))

elif cmd == 'describeTable':
  if len(args) != 1:
    print('describeTable requires 1 args')
    sys.exit(1)
  pp.pprint(client.describeTable(args[0],))

elif cmd == 'getTableStatus':
  if len(args) != 1:
    print('getTableStatus requires 1 args')
    sys.exit(1)
  pp.pprint(client.getTableStatus(args[0],))

elif cmd == 'getTableState':
  if len(args) != 1:
    print('getTableState requires 1 args')
    sys.exit(1)
  pp.pprint(client.getTableState(args[0],))

elif cmd == 'getTableSplits':
  if len(args) != 3:
    print('getTableSplits requires 3 args')
    sys.exit(1)
  pp.pprint(client.getTableSplits(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'queryMetric':
  if len(args) != 1:
    print('queryMetric requires 1 args')
    sys.exit(1)
  pp.pprint(client.queryMetric(eval(args[0]),))

elif cmd == 'queryMetrics':
  if len(args) != 1:
    print('queryMetrics requires 1 args')
    sys.exit(1)
  pp.pprint(client.queryMetrics(eval(args[0]),))

elif cmd == 'findAllAppInfo':
  if len(args) != 0:
    print('findAllAppInfo requires 0 args')
    sys.exit(1)
  pp.pprint(client.findAllAppInfo())

elif cmd == 'getTableSize':
  if len(args) != 1:
    print('getTableSize requires 1 args')
    sys.exit(1)
  pp.pprint(client.getTableSize(args[0],))

elif cmd == 'putClientMetrics':
  if len(args) != 1:
    print('putClientMetrics requires 1 args')
    sys.exit(1)
  pp.pprint(client.putClientMetrics(eval(args[0]),))

elif cmd == 'subscribePhoneAlert':
  if len(args) != 2:
    print('subscribePhoneAlert requires 2 args')
    sys.exit(1)
  pp.pprint(client.subscribePhoneAlert(args[0],args[1],))

elif cmd == 'unsubscribePhoneAlert':
  if len(args) != 2:
    print('unsubscribePhoneAlert requires 2 args')
    sys.exit(1)
  pp.pprint(client.unsubscribePhoneAlert(args[0],args[1],))

elif cmd == 'subscribeEmailAlert':
  if len(args) != 2:
    print('subscribeEmailAlert requires 2 args')
    sys.exit(1)
  pp.pprint(client.subscribeEmailAlert(args[0],args[1],))

elif cmd == 'unsubscribeEmailAlert':
  if len(args) != 2:
    print('unsubscribeEmailAlert requires 2 args')
    sys.exit(1)
  pp.pprint(client.unsubscribeEmailAlert(args[0],args[1],))

elif cmd == 'listSubscribedPhone':
  if len(args) != 1:
    print('listSubscribedPhone requires 1 args')
    sys.exit(1)
  pp.pprint(client.listSubscribedPhone(args[0],))

elif cmd == 'listSubscribedEmail':
  if len(args) != 1:
    print('listSubscribedEmail requires 1 args')
    sys.exit(1)
  pp.pprint(client.listSubscribedEmail(args[0],))

elif cmd == 'getTableHistorySize':
  if len(args) != 3:
    print('getTableHistorySize requires 3 args')
    sys.exit(1)
  pp.pprint(client.getTableHistorySize(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'renameTable':
  if len(args) != 2:
    print('renameTable requires 2 args')
    sys.exit(1)
  pp.pprint(client.renameTable(args[0],args[1],))

elif cmd == 'listSnapshots':
  if len(args) != 1:
    print('listSnapshots requires 1 args')
    sys.exit(1)
  pp.pprint(client.listSnapshots(args[0],))

elif cmd == 'snapshotTable':
  if len(args) != 2:
    print('snapshotTable requires 2 args')
    sys.exit(1)
  pp.pprint(client.snapshotTable(args[0],args[1],))

elif cmd == 'deleteSnapshot':
  if len(args) != 2:
    print('deleteSnapshot requires 2 args')
    sys.exit(1)
  pp.pprint(client.deleteSnapshot(args[0],args[1],))

elif cmd == 'restoreSnapshot':
  if len(args) != 4:
    print('restoreSnapshot requires 4 args')
    sys.exit(1)
  pp.pprint(client.restoreSnapshot(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'listAllSnapshots':
  if len(args) != 0:
    print('listAllSnapshots requires 0 args')
    sys.exit(1)
  pp.pprint(client.listAllSnapshots())

elif cmd == 'cancelSnapshotTable':
  if len(args) != 2:
    print('cancelSnapshotTable requires 2 args')
    sys.exit(1)
  pp.pprint(client.cancelSnapshotTable(args[0],args[1],))

elif cmd == 'getSnapshotState':
  if len(args) != 2:
    print('getSnapshotState requires 2 args')
    sys.exit(1)
  pp.pprint(client.getSnapshotState(args[0],args[1],))

elif cmd == 'getQuotaInfo':
  if len(args) != 1:
    print('getQuotaInfo requires 1 args')
    sys.exit(1)
  pp.pprint(client.getQuotaInfo(args[0],))

elif cmd == 'getServerVersion':
  if len(args) != 0:
    print('getServerVersion requires 0 args')
    sys.exit(1)
  pp.pprint(client.getServerVersion())

elif cmd == 'validateClientVersion':
  if len(args) != 1:
    print('validateClientVersion requires 1 args')
    sys.exit(1)
  pp.pprint(client.validateClientVersion(eval(args[0]),))

elif cmd == 'getServerTime':
  if len(args) != 0:
    print('getServerTime requires 0 args')
    sys.exit(1)
  pp.pprint(client.getServerTime())

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()

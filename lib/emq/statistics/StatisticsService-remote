#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from emq.statistics import StatisticsService
from emq.statistics.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void setUserQuota(SetUserQuotaRequest request)')
  print('  GetUserQuotaResponse getUserQuota(GetUserQuotaRequest request)')
  print('  GetUserQuotaResponse getUserUsedQuota(GetUserUsedQuotaRequest request)')
  print('  void setUserInfo(SetUserInfoRequest request)')
  print('  GetUserInfoResponse getUserInfo(GetUserInfoRequest request)')
  print('  void addQueueAlertPolicy(AddQueueAlertPolicyRequest request)')
  print('  void deleteQueueAlertPolicy(DeleteQueueAlertPolicyRequest request)')
  print('  ListQueueAlertPoliciesResponse listQueueAlertPolicies(ListQueueAlertPoliciesRequest request)')
  print('  void setQueueDailyStatisticsState(SetQueueDailyStatisticsStateRequest request)')
  print('  GetQueueDailyStatisticsStateResponse getQueueDailyStatisticsState(GetQueueDailyStatisticsStateRequest request)')
  print('  Version getServiceVersion()')
  print('  void validClientVersion(Version clientVersion)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = StatisticsService.Client(protocol)
transport.open()

if cmd == 'setUserQuota':
  if len(args) != 1:
    print('setUserQuota requires 1 args')
    sys.exit(1)
  pp.pprint(client.setUserQuota(eval(args[0]),))

elif cmd == 'getUserQuota':
  if len(args) != 1:
    print('getUserQuota requires 1 args')
    sys.exit(1)
  pp.pprint(client.getUserQuota(eval(args[0]),))

elif cmd == 'getUserUsedQuota':
  if len(args) != 1:
    print('getUserUsedQuota requires 1 args')
    sys.exit(1)
  pp.pprint(client.getUserUsedQuota(eval(args[0]),))

elif cmd == 'setUserInfo':
  if len(args) != 1:
    print('setUserInfo requires 1 args')
    sys.exit(1)
  pp.pprint(client.setUserInfo(eval(args[0]),))

elif cmd == 'getUserInfo':
  if len(args) != 1:
    print('getUserInfo requires 1 args')
    sys.exit(1)
  pp.pprint(client.getUserInfo(eval(args[0]),))

elif cmd == 'addQueueAlertPolicy':
  if len(args) != 1:
    print('addQueueAlertPolicy requires 1 args')
    sys.exit(1)
  pp.pprint(client.addQueueAlertPolicy(eval(args[0]),))

elif cmd == 'deleteQueueAlertPolicy':
  if len(args) != 1:
    print('deleteQueueAlertPolicy requires 1 args')
    sys.exit(1)
  pp.pprint(client.deleteQueueAlertPolicy(eval(args[0]),))

elif cmd == 'listQueueAlertPolicies':
  if len(args) != 1:
    print('listQueueAlertPolicies requires 1 args')
    sys.exit(1)
  pp.pprint(client.listQueueAlertPolicies(eval(args[0]),))

elif cmd == 'setQueueDailyStatisticsState':
  if len(args) != 1:
    print('setQueueDailyStatisticsState requires 1 args')
    sys.exit(1)
  pp.pprint(client.setQueueDailyStatisticsState(eval(args[0]),))

elif cmd == 'getQueueDailyStatisticsState':
  if len(args) != 1:
    print('getQueueDailyStatisticsState requires 1 args')
    sys.exit(1)
  pp.pprint(client.getQueueDailyStatisticsState(eval(args[0]),))

elif cmd == 'getServiceVersion':
  if len(args) != 0:
    print('getServiceVersion requires 0 args')
    sys.exit(1)
  pp.pprint(client.getServiceVersion())

elif cmd == 'validClientVersion':
  if len(args) != 1:
    print('validClientVersion requires 1 args')
    sys.exit(1)
  pp.pprint(client.validClientVersion(eval(args[0]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()

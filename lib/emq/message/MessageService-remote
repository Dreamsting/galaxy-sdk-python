#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from emq.message import MessageService
from emq.message.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  SendMessageResponse sendMessage(SendMessageRequest sendMessageRequest)')
  print('  SendMessageBatchResponse sendMessageBatch(SendMessageBatchRequest sendMessageBatchRequest)')
  print('   receiveMessage(ReceiveMessageRequest receiveMessageRequest)')
  print('  void changeMessageVisibilitySeconds(ChangeMessageVisibilityRequest changeMessageVisibilityRequest)')
  print('  ChangeMessageVisibilityBatchResponse changeMessageVisibilitySecondsBatch(ChangeMessageVisibilityBatchRequest changeMessageVisibilityBatchRequest)')
  print('  void deleteMessage(DeleteMessageRequest deleteMessageRequest)')
  print('  DeleteMessageBatchResponse deleteMessageBatch(DeleteMessageBatchRequest deleteMessageBatchRequest)')
  print('  Version getServiceVersion()')
  print('  void validClientVersion(Version clientVersion)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = MessageService.Client(protocol)
transport.open()

if cmd == 'sendMessage':
  if len(args) != 1:
    print('sendMessage requires 1 args')
    sys.exit(1)
  pp.pprint(client.sendMessage(eval(args[0]),))

elif cmd == 'sendMessageBatch':
  if len(args) != 1:
    print('sendMessageBatch requires 1 args')
    sys.exit(1)
  pp.pprint(client.sendMessageBatch(eval(args[0]),))

elif cmd == 'receiveMessage':
  if len(args) != 1:
    print('receiveMessage requires 1 args')
    sys.exit(1)
  pp.pprint(client.receiveMessage(eval(args[0]),))

elif cmd == 'changeMessageVisibilitySeconds':
  if len(args) != 1:
    print('changeMessageVisibilitySeconds requires 1 args')
    sys.exit(1)
  pp.pprint(client.changeMessageVisibilitySeconds(eval(args[0]),))

elif cmd == 'changeMessageVisibilitySecondsBatch':
  if len(args) != 1:
    print('changeMessageVisibilitySecondsBatch requires 1 args')
    sys.exit(1)
  pp.pprint(client.changeMessageVisibilitySecondsBatch(eval(args[0]),))

elif cmd == 'deleteMessage':
  if len(args) != 1:
    print('deleteMessage requires 1 args')
    sys.exit(1)
  pp.pprint(client.deleteMessage(eval(args[0]),))

elif cmd == 'deleteMessageBatch':
  if len(args) != 1:
    print('deleteMessageBatch requires 1 args')
    sys.exit(1)
  pp.pprint(client.deleteMessageBatch(eval(args[0]),))

elif cmd == 'getServiceVersion':
  if len(args) != 0:
    print('getServiceVersion requires 0 args')
    sys.exit(1)
  pp.pprint(client.getServiceVersion())

elif cmd == 'validClientVersion':
  if len(args) != 1:
    print('validClientVersion requires 1 args')
    sys.exit(1)
  pp.pprint(client.validClientVersion(eval(args[0]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()

#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from emq.queue import QueueService
from emq.queue.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  CreateQueueResponse createQueue(CreateQueueRequest request)')
  print('  void deleteQueue(DeleteQueueRequest request)')
  print('  void purgeQueue(PurgeQueueRequest request)')
  print('  SetQueueAttributesResponse setQueueAttribute(SetQueueAttributesRequest request)')
  print('  SetQueueQuotaResponse setQueueQuota(SetQueueQuotaRequest request)')
  print('  GetQueueInfoResponse getQueueInfo(GetQueueInfoRequest request)')
  print('  ListQueueResponse listQueue(ListQueueRequest request)')
  print('  SetQueueRedrivePolicyResponse setQueueRedrivePolicy(SetQueueRedrivePolicyRequest request)')
  print('  void removeQueueRedrivePolicy(RemoveQueueRedrivePolicyRequest request)')
  print('  void setPermission(SetPermissionRequest request)')
  print('  void revokePermission(RevokePermissionRequest request)')
  print('  QueryPermissionResponse queryPermission(QueryPermissionRequest request)')
  print('  QueryPermissionForIdResponse queryPermissionForId(QueryPermissionForIdRequest request)')
  print('  ListPermissionsResponse listPermissions(ListPermissionsRequest request)')
  print('  CreateTagResponse createTag(CreateTagRequest request)')
  print('  void deleteTag(DeleteTagRequest request)')
  print('  GetTagInfoResponse getTagInfo(GetTagInfoRequest request)')
  print('  ListTagResponse listTag(ListTagRequest request)')
  print('  TimeSeriesData queryMetric(QueryMetricRequest request)')
  print('  Version getServiceVersion()')
  print('  void validClientVersion(Version clientVersion)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = QueueService.Client(protocol)
transport.open()

if cmd == 'createQueue':
  if len(args) != 1:
    print('createQueue requires 1 args')
    sys.exit(1)
  pp.pprint(client.createQueue(eval(args[0]),))

elif cmd == 'deleteQueue':
  if len(args) != 1:
    print('deleteQueue requires 1 args')
    sys.exit(1)
  pp.pprint(client.deleteQueue(eval(args[0]),))

elif cmd == 'purgeQueue':
  if len(args) != 1:
    print('purgeQueue requires 1 args')
    sys.exit(1)
  pp.pprint(client.purgeQueue(eval(args[0]),))

elif cmd == 'setQueueAttribute':
  if len(args) != 1:
    print('setQueueAttribute requires 1 args')
    sys.exit(1)
  pp.pprint(client.setQueueAttribute(eval(args[0]),))

elif cmd == 'setQueueQuota':
  if len(args) != 1:
    print('setQueueQuota requires 1 args')
    sys.exit(1)
  pp.pprint(client.setQueueQuota(eval(args[0]),))

elif cmd == 'getQueueInfo':
  if len(args) != 1:
    print('getQueueInfo requires 1 args')
    sys.exit(1)
  pp.pprint(client.getQueueInfo(eval(args[0]),))

elif cmd == 'listQueue':
  if len(args) != 1:
    print('listQueue requires 1 args')
    sys.exit(1)
  pp.pprint(client.listQueue(eval(args[0]),))

elif cmd == 'setQueueRedrivePolicy':
  if len(args) != 1:
    print('setQueueRedrivePolicy requires 1 args')
    sys.exit(1)
  pp.pprint(client.setQueueRedrivePolicy(eval(args[0]),))

elif cmd == 'removeQueueRedrivePolicy':
  if len(args) != 1:
    print('removeQueueRedrivePolicy requires 1 args')
    sys.exit(1)
  pp.pprint(client.removeQueueRedrivePolicy(eval(args[0]),))

elif cmd == 'setPermission':
  if len(args) != 1:
    print('setPermission requires 1 args')
    sys.exit(1)
  pp.pprint(client.setPermission(eval(args[0]),))

elif cmd == 'revokePermission':
  if len(args) != 1:
    print('revokePermission requires 1 args')
    sys.exit(1)
  pp.pprint(client.revokePermission(eval(args[0]),))

elif cmd == 'queryPermission':
  if len(args) != 1:
    print('queryPermission requires 1 args')
    sys.exit(1)
  pp.pprint(client.queryPermission(eval(args[0]),))

elif cmd == 'queryPermissionForId':
  if len(args) != 1:
    print('queryPermissionForId requires 1 args')
    sys.exit(1)
  pp.pprint(client.queryPermissionForId(eval(args[0]),))

elif cmd == 'listPermissions':
  if len(args) != 1:
    print('listPermissions requires 1 args')
    sys.exit(1)
  pp.pprint(client.listPermissions(eval(args[0]),))

elif cmd == 'createTag':
  if len(args) != 1:
    print('createTag requires 1 args')
    sys.exit(1)
  pp.pprint(client.createTag(eval(args[0]),))

elif cmd == 'deleteTag':
  if len(args) != 1:
    print('deleteTag requires 1 args')
    sys.exit(1)
  pp.pprint(client.deleteTag(eval(args[0]),))

elif cmd == 'getTagInfo':
  if len(args) != 1:
    print('getTagInfo requires 1 args')
    sys.exit(1)
  pp.pprint(client.getTagInfo(eval(args[0]),))

elif cmd == 'listTag':
  if len(args) != 1:
    print('listTag requires 1 args')
    sys.exit(1)
  pp.pprint(client.listTag(eval(args[0]),))

elif cmd == 'queryMetric':
  if len(args) != 1:
    print('queryMetric requires 1 args')
    sys.exit(1)
  pp.pprint(client.queryMetric(eval(args[0]),))

elif cmd == 'getServiceVersion':
  if len(args) != 0:
    print('getServiceVersion requires 0 args')
    sys.exit(1)
  pp.pprint(client.getServiceVersion())

elif cmd == 'validClientVersion':
  if len(args) != 1:
    print('validClientVersion requires 1 args')
    sys.exit(1)
  pp.pprint(client.validClientVersion(eval(args[0]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()

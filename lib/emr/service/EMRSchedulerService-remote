#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from EMRService import EMRSchedulerService
from EMRService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  CreateClusterResponse createCluster(CreateClusterRequest cluster)'
  print '  AddInstanceGroupResponse addInstanceGroup(AddInstanceGroupRequest instanceGroup)'
  print '   addInstanceGroups( instanceGroups)'
  print '  SubmitJobResponse submitJob(SubmitJobRequest job)'
  print '   submitJobs( jobs)'
  print '  string terminateCluster(TerminateClusterRequest terminateCluster)'
  print '  ModifyInstanceGroupResponse modifyInstanceGroup(ModifyInstanceGroupRequest instanceGroup)'
  print '  ClusterDetail describeCluster(string clusterId)'
  print '  InstanceGroupDetail describeInstanceGroup(string instanceGroupId)'
  print '  InstanceDetail describeInstance(string clusterId, string instanceId)'
  print '  JobDetail describeJob(string clusterId, string jobId)'
  print '   listClusters(i32 createdAfter, i32 createdBefore)'
  print '   listInstanceGroups(string clusterId)'
  print '   listInstancesInCluster(string clusterId)'
  print '   listInstancesInGroup(string clusterId, string groupId, InstanceGroupRole groupRole)'
  print '   listJobs(string clusterId)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = EMRSchedulerService.Client(protocol)
transport.open()

if cmd == 'createCluster':
  if len(args) != 1:
    print 'createCluster requires 1 args'
    sys.exit(1)
  pp.pprint(client.createCluster(eval(args[0]),))

elif cmd == 'addInstanceGroup':
  if len(args) != 1:
    print 'addInstanceGroup requires 1 args'
    sys.exit(1)
  pp.pprint(client.addInstanceGroup(eval(args[0]),))

elif cmd == 'addInstanceGroups':
  if len(args) != 1:
    print 'addInstanceGroups requires 1 args'
    sys.exit(1)
  pp.pprint(client.addInstanceGroups(eval(args[0]),))

elif cmd == 'submitJob':
  if len(args) != 1:
    print 'submitJob requires 1 args'
    sys.exit(1)
  pp.pprint(client.submitJob(eval(args[0]),))

elif cmd == 'submitJobs':
  if len(args) != 1:
    print 'submitJobs requires 1 args'
    sys.exit(1)
  pp.pprint(client.submitJobs(eval(args[0]),))

elif cmd == 'terminateCluster':
  if len(args) != 1:
    print 'terminateCluster requires 1 args'
    sys.exit(1)
  pp.pprint(client.terminateCluster(eval(args[0]),))

elif cmd == 'modifyInstanceGroup':
  if len(args) != 1:
    print 'modifyInstanceGroup requires 1 args'
    sys.exit(1)
  pp.pprint(client.modifyInstanceGroup(eval(args[0]),))

elif cmd == 'describeCluster':
  if len(args) != 1:
    print 'describeCluster requires 1 args'
    sys.exit(1)
  pp.pprint(client.describeCluster(args[0],))

elif cmd == 'describeInstanceGroup':
  if len(args) != 1:
    print 'describeInstanceGroup requires 1 args'
    sys.exit(1)
  pp.pprint(client.describeInstanceGroup(args[0],))

elif cmd == 'describeInstance':
  if len(args) != 2:
    print 'describeInstance requires 2 args'
    sys.exit(1)
  pp.pprint(client.describeInstance(args[0],args[1],))

elif cmd == 'describeJob':
  if len(args) != 2:
    print 'describeJob requires 2 args'
    sys.exit(1)
  pp.pprint(client.describeJob(args[0],args[1],))

elif cmd == 'listClusters':
  if len(args) != 2:
    print 'listClusters requires 2 args'
    sys.exit(1)
  pp.pprint(client.listClusters(eval(args[0]),eval(args[1]),))

elif cmd == 'listInstanceGroups':
  if len(args) != 1:
    print 'listInstanceGroups requires 1 args'
    sys.exit(1)
  pp.pprint(client.listInstanceGroups(args[0],))

elif cmd == 'listInstancesInCluster':
  if len(args) != 1:
    print 'listInstancesInCluster requires 1 args'
    sys.exit(1)
  pp.pprint(client.listInstancesInCluster(args[0],))

elif cmd == 'listInstancesInGroup':
  if len(args) != 3:
    print 'listInstancesInGroup requires 3 args'
    sys.exit(1)
  pp.pprint(client.listInstancesInGroup(args[0],args[1],eval(args[2]),))

elif cmd == 'listJobs':
  if len(args) != 1:
    print 'listJobs requires 1 args'
    sys.exit(1)
  pp.pprint(client.listJobs(args[0],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()

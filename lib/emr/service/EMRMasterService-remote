#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from EMRService import EMRMasterService
from EMRService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  bool ping()'
  print '  SetConfigResponse setConfig(SetConfigRequest request)'
  print '  StartServiceResponse startService(StartServiceRequest request)'
  print '  StopServiceResponse stopService(StopServiceRequest request)'
  print '  ClusterState queryClusterState(string cluster)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = EMRMasterService.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'setConfig':
  if len(args) != 1:
    print 'setConfig requires 1 args'
    sys.exit(1)
  pp.pprint(client.setConfig(eval(args[0]),))

elif cmd == 'startService':
  if len(args) != 1:
    print 'startService requires 1 args'
    sys.exit(1)
  pp.pprint(client.startService(eval(args[0]),))

elif cmd == 'stopService':
  if len(args) != 1:
    print 'stopService requires 1 args'
    sys.exit(1)
  pp.pprint(client.stopService(eval(args[0]),))

elif cmd == 'queryClusterState':
  if len(args) != 1:
    print 'queryClusterState requires 1 args'
    sys.exit(1)
  pp.pprint(client.queryClusterState(args[0],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
